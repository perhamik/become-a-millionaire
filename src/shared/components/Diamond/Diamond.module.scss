@use '../../../shared/helpers' as *;

@mixin applyColor($color) {
	& {
		&::before,
		&::after {
			background-color: $color;
		}

		& > .diamond {
			&,
			& > :first-child {
				border-color: $color;
			}

			&::before {
				border-left-color: $color;
				border-bottom-color: $color;
			}

			&::after {
				border-right-color: $color;
				border-bottom-color: $color;
			}
		}
	}
}

@mixin specialTransition() {
	& {
		& > .diamond {
			&,
			& > :first-child,
			&::before,
			&::after {
				transition-duration: 1200ms;
				transition-timing-function: cubic-bezier(0.2, 0.9, 0.5, -1);
			}
		}
	}
}

@mixin changeBG($color) {
	& {
		& > .diamond {
			&,
			& > :first-child,
			&::before,
			&::after {
				background-color: $color;
			}
		}
	}
}

.container {
	&[data-size='sm'] {
		--child-size: 14px;
		--side-border-left: -1em;
		--side-border-right: 1.5em;

		@include if-mobile {
			--child-size: 9pt;
			--side-border-left: -1em;
			--side-border-right: 1.5em;
		}

		.diamond {
			width: 80%;
			max-width: 240px;

			& > :first-child {
				padding: 6px 24px;
			}
		}
	}

	.diamond {
		width: 80%;

		& > * {
			width: 100%;
		}
	}
}

.container {
	--child-size: 26px;
	--side-border-left: -1.2em;
	--side-border-right: 1.5em;

	@include if-mobile {
		--child-size: 20px;

		--side-border-left: -1.25em;
		--side-border-right: 1.5em;
	}

	display: flex;
	flex-direction: column;
	align-items: center;
	height: fit-content;
	position: relative;
	overflow: hidden;
	padding: 0 1em;
	font-size: 10px;
	cursor: pointer;

	&,
	& > .diamond {
		&,
		& > :first-child,
		&::before,
		&::after {
			transition: 320ms linear;
		}
	}

	&::before,
	&::after {
		content: '';
		display: block;
		position: absolute;
		top: 0;
		bottom: 0;
		margin: auto;
		height: 1px;
		width: 40%;
		background-color: var(--black-40);
		pointer-events: none;
	}

	&::before {
		left: 0;
	}

	&::after {
		right: 0;
	}

	&[data-state='default'] {
		&:hover {
			@include applyColor(var(--orange-100));
		}
	}

	&[data-state='inactive'] {
		pointer-events: none;
	}

	&[data-state='disabled'] {
		@include applyColor(var(--black-40));
		pointer-events: none;
		color: var(--black-40);
	}

	&[data-state='current'] {
		@include applyColor(var(--orange-100));
		color: var(--orange-100);
	}

	&[data-state='active'] {
		@include applyColor(var(--orange-100));
		@include changeBG(var(--orange-5));
	}

	&[data-state='correct'] {
		@include applyColor(var(--green-100));
		@include changeBG(var(--green-5));
		// @include specialTransition();
	}

	&[data-state='wrong'] {
		@include applyColor(var(--red-100));
		@include changeBG(var(--red-5));
		// @include specialTransition();
	}
}

.diamond {
	font-size: var(--child-size);
	display: block;
	position: relative;
	z-index: 5;
	white-space: nowrap;

	padding: 0;

	margin-left: 1.6em;
	margin-right: 1.6em;

	& > :first-child {
		position: relative;
		padding: 1.1em 0.5em;
		border-width: 1px 0;
		border-style: solid;
		border-color: var(--black-40);
		z-index: 10;
		margin: 0 3px;
		background-color: var(--white-100);

		@include if-mobile {
			padding: 1.25em 0.5em;
		}
	}

	&::before,
	&::after {
		background-color: var(--white-100);
		border: 0 solid var(--black-40);
		pointer-events: none;
	}

	&::before,
	&::after {
		content: '';
		display: inline-block;
		position: absolute;
		inset: -50% 0 50% 0;
	}

	&::before {
		border-bottom-width: 1px;
		border-left-width: 1px;

		transform: translateX(var(--side-border-left)) rotate(45deg);
		transform-origin: 0% 100%;
	}

	&::after {
		transform: translateX(var(--side-border-right)) rotate(-45deg);
		transform-origin: 100% 100%;

		border-bottom-width: 1px;
		border-right-width: 1px;
	}
}
